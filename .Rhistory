```
### 2.4 Correlation Matrix
Let's find a correlation matrix for the various variables.
```{r}
sin_listing.clean_cap = select(sin_listing.clean, Price, Capacity, Private_ind, House_ind, P_Cap, H_Cap)
sin_listing.clean_cap
chart.Correlation(sin_listing.clean_cap, histogram=TRUE, pch=19)
sin_listing.clean_corr <- cor(sin_listing.clean_cap, use = "complete.obs")
head(round(sin_listing.clean_corr, 2))
corrplot(sin_listing.clean_corr)
```
```{r}
# la_listing <- la_listing %>%
#               dplyr::filter(Price < 5000 , !is.na(Beds), !is.na(Baths), !is.na(Price), !is.na(Rating)) %>%
#                 dplyr::filter(Capacity < 9) %>%
#                 mutate(ln_Reviews = log(1+Reviews)) %>%
#                 mutate(ln_Monthly_Reviews = log(1+Monthly_Reviews))
```
```{r}
# Remove Baths as Columns are all NA
# Remove ln_Price, Latitude/Longitude
sin_listing.clean_subset <- sin_listing.clean[,!names(sin_listing.clean) %in% c('ln_Price','Baths','Baths_Sqr','ln_Baths','latitude','longitude')]
# Imputing Missing Data
md.pattern(sin_listing.clean_subset)
imputed_Data <- mice(sin_listing.clean_subset, m=5, maxit = 50, method = 'pmm', seed = 100)
sin_listing.clean_imputed <- complete(imputed_Data,2)
md.pattern(sin_listing.clean_imputed)
#Define Smallest and Full Model
minmod = lm(Price~1, data = sin_listing.clean_imputed)
fullmod = lm(Price~. , data = sin_listing.clean_imputed)
#Define Smallest and Full Model - Without Neighbourhood
#minmod = lm(Price~1, data = sin_listing.clean_imputed[,!names(sin_listing.clean_imputed) %in% c('Neighbourhood')])
#fullmod = lm(Price~. , data = sin_listing.clean_imputed[,!names(sin_listing.clean_imputed) %in% c('Neighbourhood')])
# Using BIC: k=log(nobs(fullmod), Using AIC: k=2
backward_regression = step(fullmod, scope = list(lower = minmod, upper = fullmod),direction = "backward", k=log(nobs(fullmod)), trace=F)
forward_regression = step(minmod, scope = list(lower = minmod, upper = fullmod),direction = "forward", k=log(nobs(fullmod)), trace=F)
summary(backward_regression)
summary(forward_regression)
```
# Imputing Missing Data
md.pattern(listing.sin)
View(listing.sin)
View(listing.sin)
View(listing_amenities.sin)
View(reviews.sin)
View(listing_host_verf.sin)
list_after_2019.sin <- list.sin %>% filter(!is.na(reviews_since_2019))
list_after_2019.sin <- list.sin %>% filter(!is.na(reviews_since_2019))
list.sin <-count_reviews(list.sin, reviews.sin,start_date, end_date)
count_reviews <- function(listings, reviews, from_date, to_date)
{
reviews_grouped <- reviews %>%
mutate(date = as.Date(date)) %>%
filter(between(date, as.Date(from_date), as.Date(to_date))) %>%
group_by(listing_id) %>%
summarise(reviews_since_2019 = n()) %>%
mutate(bookings_since_2019 = reviews_since_2019*2) %>%
rename(id = listing_id)
listings <- left_join(listings, reviews_grouped, by="id")
return(listings)
}
start_date = "2019-1-1"
end_date = "2021-12-31"
list.sin <-count_reviews(list.sin, reviews.sin,start_date, end_date)
wrangle_airbnb_dataset <- function (raw_listing_full)
{
listing.raw <- raw_listing_full  %>%
select(id, price,number_of_reviews,beds,bathrooms,accommodates,reviews_per_month, property_type, room_type, review_scores_rating, neighbourhood_cleansed, host_response_time, host_response_rate, host_acceptance_rate, host_is_superhost, latitude, longitude, amenities, last_review, no_of_am, Amenities_Wifi, Amenities_Shampoo, Amenities_Kitchen, Amenities_Long_Term, Amenities_Washer, Amenities_HairDryer, Amenities_HotWater, Amenities_TV,Amenities_AC, host_verifications, hv_email,hv_phone, hv_facebook, hv_reviews, hv_manual_offline, hv_manual_jumio,hv_manual_off_gov, hv_manual_gov, hv_manual_work_email, no_of_vf) %>%
rename(Reviews = number_of_reviews) %>%
rename(Beds = beds) %>%
rename(Baths = bathrooms) %>%
rename(Capacity = accommodates) %>%
rename(Monthly_Reviews = reviews_per_month) %>%
rename(Property_Type = property_type) %>%
rename(Room_Type = room_type) %>%
rename(Price = price) %>%
rename(Rating = review_scores_rating) %>%
rename(Neighbourhood = neighbourhood_cleansed) %>%
rename(host_Superhost = host_is_superhost)
listing.raw <-  listing.raw %>%
mutate(Price = str_replace(Price, "[$]", "")) %>%
mutate(Price = str_replace(Price, "[,]", "")) %>%
mutate(Price = as.numeric(Price)) %>%
mutate(host_response_rate = str_replace(host_response_rate, "[%]", "")) %>%
mutate(host_response_rate = as.numeric(host_response_rate)/100) %>%
mutate(host_acceptance_rate = str_replace(host_acceptance_rate, "[%]", "")) %>%
mutate(host_acceptance_rate = as.numeric(host_acceptance_rate)/100) %>%
mutate(host_Superhost = ifelse(host_Superhost =="f", 0, 1)) %>%
mutate(host_response_rate = factor(host_response_rate, levels = c("within a few hours", "within a day", "a few days or more"))) %>%
mutate(host_response_hours = ifelse(host_response_rate == "within a few hours"),1,0) %>%
mutate(host_response_day = ifelse(host_response_rate == "within a day"),1,0) %>%
mutate(host_response_few_days = ifelse(host_response_rate == "a few days or more"),1,0) %>%
mutate(last_review = as.Date(last_review)) %>%
mutate(Days_since_last_review = as.numeric(difftime(as.Date("2021-12-31"), last_review, units="days"))) %>%
mutate(Room_Type = factor(Room_Type, levels = c("Shared room", "Private room", "Entire home/apt"))) %>%
mutate(Capacity_Sqr = Capacity * Capacity) %>%
mutate(Beds_Sqr = Beds * Beds) %>%
mutate(Baths_Sqr = Baths * Baths) %>%
mutate(ln_Price = log(1+Price)) %>%
mutate(ln_Beds = log(1+Beds)) %>%
mutate(ln_Baths = log(1+Baths)) %>%
mutate(ln_Capacity = log(1+Capacity)) %>%
mutate(ln_Rating = log(1+Rating)) %>%
mutate(Shared_ind = ifelse(Room_Type == "Shared room",1,0)) %>%
mutate(House_ind = ifelse(Room_Type == "Entire home/apt",1,0)) %>%
mutate(Private_ind = ifelse(Room_Type == "Private room",1,0)) %>%
mutate(Capacity_x_Shared_ind = Shared_ind * Capacity) %>%
mutate(H_Cap = House_ind * Capacity) %>%
mutate(P_Cap = Private_ind * Capacity) %>%
mutate(ln_Capacity_x_Shared_ind = Shared_ind * ln_Capacity) %>%
mutate(ln_Capacity_x_House_ind = House_ind * ln_Capacity) %>%
mutate(ln_Capacity_x_Private_ind = Private_ind * ln_Capacity) %>%
filter(!is.na(Price))
return(listing.raw)
}
wrangle_amenities_hostvf <- function (listing)
{
listing <- listing %>%
mutate(amenities = str_replace(amenities, "\\[","")) %>%
mutate(amenities = str_replace(amenities, "\\]","")) %>%
mutate(amenities = str_replace_all(amenities, "\"","")) %>%
mutate(amenities = str_replace_all(amenities, ", " ,",")) %>%
mutate(amenities_list = as.list(strsplit(amenities, ","))) %>%
mutate(no_of_am = lengths(amenities_list)) %>%
mutate(Amenities_Wifi = as.numeric(grepl('Wifi', amenities, fixed = TRUE))) %>%
mutate(Amenities_Shampoo = as.numeric(grepl('Shampoo', amenities, fixed = TRUE))) %>%
mutate(Amenities_Kitchen = as.numeric(grepl('Kitchen', amenities, fixed = TRUE))) %>%
mutate(Amenities_Long_Term = as.numeric(grepl('Long term stays', amenities, fixed = TRUE))) %>%
mutate(Amenities_Washer = as.numeric(grepl('Washer', amenities, fixed = TRUE))) %>%
mutate(Amenities_HairDryer = as.numeric(grepl('Hair dryer', amenities, fixed = TRUE))) %>%
mutate(Amenities_HotWater = as.numeric(grepl('Hot water', amenities, fixed = TRUE))) %>%
mutate(Amenities_TV = as.numeric(grepl('TV', amenities, fixed = TRUE))) %>%
mutate(Amenities_AC = as.numeric(grepl('Air conditioning', amenities, fixed = TRUE))) %>%
mutate(host_verifications = str_replace(host_verifications, "\\[","")) %>%
mutate(host_verifications = str_replace(host_verifications, "\\]","")) %>%
mutate(host_verifications = str_replace_all(host_verifications, "\"","")) %>%
mutate(host_verifications = str_replace_all(host_verifications, ", " ,",")) %>%
mutate(host_verifications_list = as.list(strsplit(host_verifications, ","))) %>%
mutate(hv_email = as.numeric(grepl('email', host_verifications, fixed = TRUE))) %>%
mutate(hv_phone = as.numeric(grepl('phone', host_verifications, fixed = TRUE))) %>%
mutate(hv_facebook = as.numeric(grepl('facebook', host_verifications, fixed = TRUE))) %>%
mutate(hv_reviews = as.numeric(grepl('reviews', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_offline = as.numeric(grepl('manual_offline', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_jumio = as.numeric(grepl('jumio', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_off_gov = as.numeric(grepl('offline_government_id', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_gov = as.numeric(grepl('government_id', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_work_email = as.numeric(grepl('work_email', host_verifications, fixed = TRUE))) %>%
mutate(no_of_vf = lengths(host_verifications_list))
}
#Singapore
listing.sin <- read.csv("./data/SIN_listings.csv")
reviews.sin <- read.csv("./data/SIN_reviews.csv")
calendar.sin <- read.csv("./data/SIN_calendar.csv")
neighbourhoods.sin <- read.csv("./data/SIN_neighbourhoods.csv")
map.sin <- geojson_read("./data/SIN_neighbourhoods.geojson")
cities  <- c("Singapore", "Tokyo", "Taipei", "Hong Kong")
no_of_listings <- c(nrow(listing.sin), nrow(listing.nrt), nrow(listing.tpe), nrow(listing.hkg))
no_of_listings.fig <- plot_ly(
x = cities,
y = no_of_listings,
type = "bar",
text = no_of_listings
)
bar_charts_by_neighbourhood <- function (listing, city_name, neighbourhoods)
{
listings_by_neighbourhood <- listing %>%
count(neighbourhood_cleansed) %>%
# rename(neighbourhood = neighbourhood_cleansed)
arrange(desc(n))
# print(listings_by_neighbourhood)
neighbourhoods_zero <- neighbourhoods %>%
filter(!neighbourhood %in% listings_by_neighbourhood$neighbourhood_cleansed) %>%
rename(neighbourhood_cleansed = neighbourhood) %>%
mutate(n = 0) %>%
select(neighbourhood_cleansed, n)
print(neighbourhoods_zero)
listings_by_neighbourhood <- union(listings_by_neighbourhood, neighbourhoods_zero)
# print(listings_by_neighbourhood)
fig<- plot_ly(y=listings_by_neighbourhood$neighbourhood_cleansed, x=listings_by_neighbourhood$n, type="bar", orientation="h") %>%
layout(yaxis=list(categoryorder = "total ascending"), title=paste("Listings per neighbourhood in", city_name))
fig
}
bar_charts_by_neighbourhood(listing.sin, "Singapore", neighbourhoods.sin)
listing_amenities.sin <- listing.sin %>%
mutate(amenities = str_replace(amenities, "\\[","")) %>%
mutate(amenities = str_replace(amenities, "\\]","")) %>%
mutate(amenities = str_replace_all(amenities, "\"","")) %>%
mutate(amenities = str_replace_all(amenities, ", " ,",")) %>%
mutate(amenities_list = as.list(strsplit(amenities, ","))) %>%
mutate(no_of_am = lengths(amenities_list)) %>%
mutate(Wifi = as.numeric(grepl('Wifi', amenities, fixed = TRUE))) %>%
mutate(Shampoo = as.numeric(grepl('Shampoo', amenities, fixed = TRUE))) %>%
mutate(Kitchen = as.numeric(grepl('Kitchen', amenities, fixed = TRUE)))
# listing_amenities.sin %>% select(amenities, Wifi, Shampoo, Kitchen, Patio)
max_amenities.sin <- listing_amenities.sin %>%
select(amenities, no_of_am) %>%
group_by() %>%
slice(which.max(no_of_am))
amenities_list_string <- as.list(strsplit(as.character(max_amenities.sin["amenities"]), ","))
amenities_list_string
listing_host_verf.sin <- listing.sin %>%
mutate(host_verifications = str_replace(host_verifications, "\\[","")) %>%
mutate(host_verifications = str_replace(host_verifications, "\\]","")) %>%
mutate(host_verifications = str_replace_all(host_verifications, "\"","")) %>%
mutate(host_verifications = str_replace_all(host_verifications, ", " ,",")) %>%
mutate(host_verifications_list = as.list(strsplit(host_verifications, ","))) %>%
mutate(no_of_vf = lengths(host_verifications_list))
max_verf.sin <- listing_host_verf.sin %>%
select(host_verifications, no_of_vf) %>%
group_by() %>%
slice(which.max(no_of_vf))
host_verf_list_string <- as.list(strsplit(as.character(max_verf.sin["host_verifications"]), ","))
host_verf_list_string
wrangle_amenities_hostvf <- function (listing)
{
listing <- listing %>%
mutate(amenities = str_replace(amenities, "\\[","")) %>%
mutate(amenities = str_replace(amenities, "\\]","")) %>%
mutate(amenities = str_replace_all(amenities, "\"","")) %>%
mutate(amenities = str_replace_all(amenities, ", " ,",")) %>%
mutate(amenities_list = as.list(strsplit(amenities, ","))) %>%
mutate(no_of_am = lengths(amenities_list)) %>%
mutate(Amenities_Wifi = as.numeric(grepl('Wifi', amenities, fixed = TRUE))) %>%
mutate(Amenities_Shampoo = as.numeric(grepl('Shampoo', amenities, fixed = TRUE))) %>%
mutate(Amenities_Kitchen = as.numeric(grepl('Kitchen', amenities, fixed = TRUE))) %>%
mutate(Amenities_Long_Term = as.numeric(grepl('Long term stays', amenities, fixed = TRUE))) %>%
mutate(Amenities_Washer = as.numeric(grepl('Washer', amenities, fixed = TRUE))) %>%
mutate(Amenities_HairDryer = as.numeric(grepl('Hair dryer', amenities, fixed = TRUE))) %>%
mutate(Amenities_HotWater = as.numeric(grepl('Hot water', amenities, fixed = TRUE))) %>%
mutate(Amenities_TV = as.numeric(grepl('TV', amenities, fixed = TRUE))) %>%
mutate(Amenities_AC = as.numeric(grepl('Air conditioning', amenities, fixed = TRUE))) %>%
mutate(host_verifications = str_replace(host_verifications, "\\[","")) %>%
mutate(host_verifications = str_replace(host_verifications, "\\]","")) %>%
mutate(host_verifications = str_replace_all(host_verifications, "\"","")) %>%
mutate(host_verifications = str_replace_all(host_verifications, ", " ,",")) %>%
mutate(host_verifications_list = as.list(strsplit(host_verifications, ","))) %>%
mutate(hv_email = as.numeric(grepl('email', host_verifications, fixed = TRUE))) %>%
mutate(hv_phone = as.numeric(grepl('phone', host_verifications, fixed = TRUE))) %>%
mutate(hv_facebook = as.numeric(grepl('facebook', host_verifications, fixed = TRUE))) %>%
mutate(hv_reviews = as.numeric(grepl('reviews', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_offline = as.numeric(grepl('manual_offline', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_jumio = as.numeric(grepl('jumio', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_off_gov = as.numeric(grepl('offline_government_id', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_gov = as.numeric(grepl('government_id', host_verifications, fixed = TRUE))) %>%
mutate(hv_manual_work_email = as.numeric(grepl('work_email', host_verifications, fixed = TRUE))) %>%
mutate(no_of_vf = lengths(host_verifications_list))
}
listing.sin <- wrangle_amenities_hostvf(listing.sin)
listing.nrt <- wrangle_amenities_hostvf(listing.nrt)
listing.tpe <- wrangle_amenities_hostvf(listing.tpe)
listing.hkg <- wrangle_amenities_hostvf(listing.hkg)
wrangle_airbnb_dataset <- function (raw_listing_full)
{
listing.raw <- raw_listing_full  %>%
select(id, price,number_of_reviews,beds,bathrooms,accommodates,reviews_per_month, property_type, room_type, review_scores_rating, neighbourhood_cleansed, host_response_time, host_response_rate, host_acceptance_rate, host_is_superhost, latitude, longitude, amenities, last_review, no_of_am, Amenities_Wifi, Amenities_Shampoo, Amenities_Kitchen, Amenities_Long_Term, Amenities_Washer, Amenities_HairDryer, Amenities_HotWater, Amenities_TV,Amenities_AC, host_verifications, hv_email,hv_phone, hv_facebook, hv_reviews, hv_manual_offline, hv_manual_jumio,hv_manual_off_gov, hv_manual_gov, hv_manual_work_email, no_of_vf) %>%
rename(Reviews = number_of_reviews) %>%
rename(Beds = beds) %>%
rename(Baths = bathrooms) %>%
rename(Capacity = accommodates) %>%
rename(Monthly_Reviews = reviews_per_month) %>%
rename(Property_Type = property_type) %>%
rename(Room_Type = room_type) %>%
rename(Price = price) %>%
rename(Rating = review_scores_rating) %>%
rename(Neighbourhood = neighbourhood_cleansed) %>%
rename(host_Superhost = host_is_superhost)
listing.raw <-  listing.raw %>%
mutate(Price = str_replace(Price, "[$]", "")) %>%
mutate(Price = str_replace(Price, "[,]", "")) %>%
mutate(Price = as.numeric(Price)) %>%
mutate(host_response_rate = str_replace(host_response_rate, "[%]", "")) %>%
mutate(host_response_rate = as.numeric(host_response_rate)/100) %>%
mutate(host_acceptance_rate = str_replace(host_acceptance_rate, "[%]", "")) %>%
mutate(host_acceptance_rate = as.numeric(host_acceptance_rate)/100) %>%
mutate(host_Superhost = ifelse(host_Superhost =="f", 0, 1)) %>%
mutate(host_response_rate = factor(host_response_rate, levels = c("within a few hours", "within a day", "a few days or more"))) %>%
mutate(host_response_hours = ifelse(host_response_rate == "within a few hours"),1,0) %>%
mutate(host_response_day = ifelse(host_response_rate == "within a day"),1,0) %>%
mutate(host_response_few_days = ifelse(host_response_rate == "a few days or more"),1,0) %>%
mutate(last_review = as.Date(last_review)) %>%
mutate(Days_since_last_review = as.numeric(difftime(as.Date("2021-12-31"), last_review, units="days"))) %>%
mutate(Room_Type = factor(Room_Type, levels = c("Shared room", "Private room", "Entire home/apt"))) %>%
mutate(Capacity_Sqr = Capacity * Capacity) %>%
mutate(Beds_Sqr = Beds * Beds) %>%
mutate(Baths_Sqr = Baths * Baths) %>%
mutate(ln_Price = log(1+Price)) %>%
mutate(ln_Beds = log(1+Beds)) %>%
mutate(ln_Baths = log(1+Baths)) %>%
mutate(ln_Capacity = log(1+Capacity)) %>%
mutate(ln_Rating = log(1+Rating)) %>%
mutate(Shared_ind = ifelse(Room_Type == "Shared room",1,0)) %>%
mutate(House_ind = ifelse(Room_Type == "Entire home/apt",1,0)) %>%
mutate(Private_ind = ifelse(Room_Type == "Private room",1,0)) %>%
mutate(Capacity_x_Shared_ind = Shared_ind * Capacity) %>%
mutate(H_Cap = House_ind * Capacity) %>%
mutate(P_Cap = Private_ind * Capacity) %>%
mutate(ln_Capacity_x_Shared_ind = Shared_ind * ln_Capacity) %>%
mutate(ln_Capacity_x_House_ind = House_ind * ln_Capacity) %>%
mutate(ln_Capacity_x_Private_ind = Private_ind * ln_Capacity) %>%
filter(!is.na(Price))
return(listing.raw)
}
list.sin <- wrangle_airbnb_dataset(listing.sin)
list.nrt <- wrangle_airbnb_dataset(listing.nrt)
list.tpe <- wrangle_airbnb_dataset(listing.tpe)
list.hkg <- wrangle_airbnb_dataset(listing.hkg)
count_reviews <- function(listings, reviews, from_date, to_date)
{
reviews_grouped <- reviews %>%
mutate(date = as.Date(date)) %>%
filter(between(date, as.Date(from_date), as.Date(to_date))) %>%
group_by(listing_id) %>%
summarise(reviews_since_2019 = n()) %>%
mutate(bookings_since_2019 = reviews_since_2019*2) %>%
rename(id = listing_id)
listings <- left_join(listings, reviews_grouped, by="id")
return(listings)
}
start_date = "2019-1-1"
end_date = "2021-12-31"
list.sin <-count_reviews(list.sin, reviews.sin,start_date, end_date)
list.hkg <- count_reviews(list.hkg, reviews.sin,start_date, end_date)
list.tpe <- count_reviews(list.tpe, reviews.sin,start_date, end_date)
list.nrt <- count_reviews(list.nrt, reviews.sin,start_date, end_date)
list_after_2019.sin <- list.sin %>% filter(!is.na(reviews_since_2019))
list_after_2019.tpe <- list.tpe %>% filter(!is.na(reviews_since_2019))
list_after_2019.nrt <- list.nrt %>% filter(!is.na(reviews_since_2019))
list_after_2019.hkg <- list.hkg %>% filter(!is.na(reviews_since_2019))
View(list_after_2019.sin)
View(list.tpe)
View(list_after_2019.sin)
View(listing_host_verf.sin)
View(list_after_2019.tpe)
View(list.hkg)
list.hkg <- count_reviews(list.hkg, reviews.sin,start_date, end_date)
list_after_2019.hkg <- list.hkg %>% filter(!is.na(reviews_since_2019))
list_after_2019.tpe <- list.tpe %>% filter(!is.na(reviews_since_2019))
View(list_after_2019.sin)
list_after_2019.sin
str(list_after_2019.sin)
colnames(list_after_2019.sin)
list_after_2019.sin[c('id')]
list_after_2019.sin[c('id',"Price")]
print(list_after_2019.sin[c('id',"Price")])
list_after_2019.sin[,c('id',"Price")]
list_after_2019.sin[,c("id","Price","Reviews","Beds","Baths","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_response_rate","host_acceptance_rate","host_Superhost","latitude","longitude","amenities","last_review","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","host_verifications","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","host_response_hours","host_response_day","host_response_few_days","Days_since_last_review","Capacity_Sqr","Beds_Sqr","Baths_Sqr","ln_Price","ln_Beds","ln_Baths","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_response_rate","host_acceptance_rate","host_Superhost","last_review","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_response_rate","host_acceptance_rate","host_Superhost","last_review","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
str(selecting_columns)
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
str(selecting_columns)
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
str(selecting_columns)
md.pattern(selecting_columns)
View(selecting_columns)
na.omit(selecting_columns)
#str(selecting_columns)
md.pattern(selecting_columns)
selecting_columns <- na.omit(selecting_columns)
#str(selecting_columns)
md.pattern(selecting_columns)
View(list_after_2019.sin)
clean_subset(list_after_2019.sin)
clean_subset <- function(list_after_2019.country) {
# remove_columns <- a[,!names(list_after_2019.country) %in% c('ln_Price','Baths','Baths_Sqr','ln_Baths','latitude','longitude')]
# imputed_Data <- mice(remove_columns, m=5, maxit = 50, method = 'pmm', seed = 100)
# clean_imputed <- complete(imputed_Data,2)
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
selecting_columns <- na.omit(selecting_columns)
return(selecting_columns)
}
clean_subset(list_after_2019.sin)
list_after_2019.sin_clean <- clean_subset(list_after_2019.sin)
minmod = lm(Price~1, data = list_after_2019.sin)
fullmod = lm(Price~. , data = list_after_2019.sin)
str(list_after_2019.sin)
str(list_after_2019.sin_clean)
clean_subset <- function(list_after_2019.country) {
# remove_columns <- a[,!names(list_after_2019.country) %in% c('ln_Price','Baths','Baths_Sqr','ln_Baths','latitude','longitude')]
# imputed_Data <- mice(remove_columns, m=5, maxit = 50, method = 'pmm', seed = 100)
# clean_imputed <- complete(imputed_Data,2)
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
selecting_columns <- na.omit(selecting_columns)
selecting_columns$Property_Type <- as.factor(selecting_columns$Property_Type)
return(selecting_columns)
}
list_after_2019.sin_clean <- clean_subset(list_after_2019.sin)
str(list_after_2019.sin_clean)
clean_subset <- function(list_after_2019.country) {
# remove_columns <- a[,!names(list_after_2019.country) %in% c('ln_Price','Baths','Baths_Sqr','ln_Baths','latitude','longitude')]
# imputed_Data <- mice(remove_columns, m=5, maxit = 50, method = 'pmm', seed = 100)
# clean_imputed <- complete(imputed_Data,2)
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
selecting_columns <- na.omit(selecting_columns)
selecting_columns$Property_Type <- as.factor(selecting_columns$Property_Type)
selecting_columns$Neighbourhood  <- as.factor(selecting_columns$Neighbourhood )
selecting_columns$host_response_time <- as.factor(selecting_columns$host_response_time)
return(selecting_columns)
}
list_after_2019.sin_clean <- clean_subset(list_after_2019.sin)
str(list_after_2019.sin_clean)
minmod = lm(Price~1, data = list_after_2019.sin)
fullmod = lm(Price~. , data = list_after_2019.sin)
library("writexl")
install.packages("writexl")
library('writexl')
write_xlsx(list_after_2019.sin_clean,"C:\Users\TJL\Downloads\test.xlxs")
write_xlsx(list_after_2019.sin_clean,"C:\Users\TJL\Downloads\test.xlsx")
write_xlsx(list_after_2019.sin_clean,"C:\Users\TJL\Downloads\\test.xlsx")
getwd()
write_xlsx(list_after_2019.sin_clean,"C:/Users/TJL/Downloads//test.xlsx")
clean_subset <- function(list_after_2019.country) {
# remove_columns <- a[,!names(list_after_2019.country) %in% c('ln_Price','Baths','Baths_Sqr','ln_Baths','latitude','longitude')]
# imputed_Data <- mice(remove_columns, m=5, maxit = 50, method = 'pmm', seed = 100)
# clean_imputed <- complete(imputed_Data,2)
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
selecting_columns <- na.omit(selecting_columns)
selecting_columns$Property_Type <- as.factor(selecting_columns$Property_Type)
selecting_columns$Neighbourhood  <- as.factor(selecting_columns$Neighbourhood )
selecting_columns$host_response_time <- as.factor(selecting_columns$host_response_time)
return(selecting_columns)
}
list_after_2019.sin_clean <- clean_subset(list_after_2019.sin)
minmod = lm(Price~1, data = list_after_2019.sin)
fullmod = lm(Price~. , data = list_after_2019.sin)
clean_subset <- function(list_after_2019.country) {
# remove_columns <- a[,!names(list_after_2019.country) %in% c('ln_Price','Baths','Baths_Sqr','ln_Baths','latitude','longitude')]
# imputed_Data <- mice(remove_columns, m=5, maxit = 50, method = 'pmm', seed = 100)
# clean_imputed <- complete(imputed_Data,2)
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer" )]
selecting_columns <- na.omit(selecting_columns)
selecting_columns$Property_Type <- as.factor(selecting_columns$Property_Type)
selecting_columns$Neighbourhood  <- as.factor(selecting_columns$Neighbourhood )
selecting_columns$host_response_time <- as.factor(selecting_columns$host_response_time)
return(selecting_columns)
}
list_after_2019.sin_clean <- clean_subset(list_after_2019.sin)
minmod = lm(Price~1, data = list_after_2019.sin_clean)
fullmod = lm(Price~. , data = list_after_2019.sin_clean)
backward_regression = step(fullmod, scope = list(lower = minmod, upper = fullmod),direction = "backward", k=log(nobs(fullmod)), trace=F)
forward_regression = step(minmod, scope = list(lower = minmod, upper = fullmod),direction = "forward", k=log(nobs(fullmod)), trace=F)
summary(backward_regression)
summary(forward_regression)
#Define Smallest and Full Model
minmod = lm(Price~1, data = list_after_2019.sin_clean)
fullmod = lm(Price~. , data = list_after_2019.sin_clean)
# Using BIC: k=log(nobs(fullmod), Using AIC: k=2
backward_regression_model <- step(fullmod, scope = list(lower = minmod, upper = fullmod),direction = "backward", k=log(nobs(fullmod)), trace=F)
summary(backward_regression_model)
View(list_after_2019.sin_clean)
clean_subset <- function(list_after_2019.country) {
### Arbitrary selection of a list of variables
selecting_columns <- list_after_2019.sin[,c("Price","Reviews","Beds","Capacity","Monthly_Reviews","Property_Type","Room_Type","Rating","Neighbourhood","host_response_time","host_acceptance_rate","host_Superhost","no_of_am","Amenities_Wifi","Amenities_Shampoo","Amenities_Kitchen","Amenities_Long_Term","Amenities_Washer","Amenities_HairDryer","Amenities_HotWater","Amenities_TV","Amenities_AC","hv_email","hv_phone","hv_facebook","hv_reviews","hv_manual_offline","hv_manual_jumio","hv_manual_off_gov","hv_manual_gov","hv_manual_work_email","no_of_vf","Days_since_last_review","Capacity_Sqr","Beds_Sqr","ln_Price","ln_Beds","ln_Capacity","ln_Rating","Shared_ind","House_ind","Private_ind","Capacity_x_Shared_ind","H_Cap","P_Cap","ln_Capacity_x_Shared_ind","ln_Capacity_x_House_ind","ln_Capacity_x_Private_ind","reviews_since_2019","bookings_since_2019" )]
### Removing rows with blanks instead of imputing
selecting_columns <- na.omit(selecting_columns)
selecting_columns$Property_Type <- as.factor(selecting_columns$Property_Type)
selecting_columns$Neighbourhood  <- as.factor(selecting_columns$Neighbourhood )
selecting_columns$host_response_time <- as.factor(selecting_columns$host_response_time)
return(selecting_columns)
}
list_after_2019.sin_clean <- clean_subset(list_after_2019.sin)
#Define Smallest and Full Model
minmod = lm(Price~1, data = list_after_2019.sin_clean)
fullmod = lm(Price~. , data = list_after_2019.sin_clean)
# Using BIC: k=log(nobs(fullmod), Using AIC: k=2
backward_regression_model <- step(fullmod, scope = list(lower = minmod, upper = fullmod),direction = "backward", k=log(nobs(fullmod)), trace=F)
summary(backward_regression_model)
#Define Smallest and Full Model
minmod = lm(Price~1, data = list_after_2019.sin_clean)
fullmod = lm(Price~. , data = list_after_2019.sin_clean)
# Using BIC: k=log(nobs(fullmod), Using AIC: k=2
backward_regression_model <- step(fullmod, scope = list(lower = minmod, upper = fullmod),direction = "backward", k=log(nobs(fullmod)), trace=F)
summary(backward_regression_model)
View(minmod)
View(fullmod)
forward_regression = step(minmod, scope = list(lower = minmod, upper = fullmod),direction = "forward", k=log(nobs(fullmod)), trace=F)
summary(forward_regression)
set.seed(123)
# Splitting the data into 80:20
train_idx <- sample(1:nrow(list_after_2019.sin_clean), 0.8*nrow(list_after_2019.sin_clean))
training_sin <- list_after_2019.sin_clean[train_idx,]
testing_sin <- list_after_2019.sin_clean[-train_idx,]
final_model_sin <- lm(formula = Price ~ ln_Price + Property_Type + ln_Capacity_x_Private_ind +
Capacity + Amenities_Wifi + Amenities_Shampoo + Amenities_AC +
no_of_am + Amenities_Kitchen + hv_email, data = training_sin)
summary(final_model_sin)
set.seed(123)
# Splitting the data into 80:20
train_idx <- sample(1:nrow(list_after_2019.sin_clean), 0.8*nrow(list_after_2019.sin_clean))
training_sin <- list_after_2019.sin_clean[train_idx,]
testing_sin <- list_after_2019.sin_clean[-train_idx,]
final_model_sin <- lm(formula = Price ~ ln_Price + Property_Type + ln_Capacity_x_Private_ind +
Capacity + Amenities_Wifi + Amenities_Shampoo + Amenities_AC +
no_of_am + Amenities_Kitchen + hv_email, data = training_sin)
summary(final_model_sin)
predict(final_model_sin,newdata=testing_sin)
mean(abs(predict_sin - list_after_2019.sin_clean$Price))
predict_sin <- predict(final_model_sin,newdata=testing_sin)
mean(abs(predict_sin - list_after_2019.sin_clean$Price))
predict_sin <- predict(final_model_sin,newdata=testing_sin)
mean(abs(predict_sin - testing_sin$Price))
cook=cooks.distance(model1)
cook=cooks.distance(final_model_sin)
plot(cook,type='h',lwd=3,ylab="Cook's Distance")
vif(final_model_sin)
library(car)
vif(final_model_sin)
cor(final_model_sin)
cor(list_after_2019.sin_clean)
cook=cooks.distance(final_model_sin)
plot(cook,type='h',lwd=3,ylab="Cook's Distance")
vif(final_model_sin)
